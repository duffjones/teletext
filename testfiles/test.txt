TESTING: 



Can be initiated by terminal: "./test filename.m7"

TESTING FILES:
-------------
TEST.M7 - standard generalized test code provided. Tests everything briefly.
TEST2.M7 - Adjustment to test.m7 that tests holding on random sixels, and provides coordinates to test file reading into 2d array for test function: TestRandomCodes();  
SIXELCHART.M7 - chart of all possible sixels for comparison with assignment. 
PANDA.M7 - pixel panda. Testing sixels, and graphics settings. 
LFC.M7 - testing the patience of ManU fans everywhere.
GIT-HISTORY.txt - Journal of comits through development process outlining progress, and problems.  

VOCABULARY
----------
CELL - A single cell of the hex array that contains a single 2 digit hex code, and the struct FLAGS that contains the cells current state of color, bgcolor, size, etc. 

FLAG - Struct containing "flags" that remember a cells states: fontsize, foreground color, background color, graphics mode, and hold mode. 

CELL MATRIX - A 2D array of 1000 CELLS that represents the complete code for our Teletext page. 

-------------------
-TESTING FUNCTIONS-
-------------------
Testing is broken up into several parts. 


BASIC FILE MANAGEMENT
---------------------
I have created a series of testing functions in testing.c that check: 
-- ARGC: Checks for wrong number of args, and handling. Should throw an error with less than 2 or 	more than 3.   
-- FILEOPEN:Checks that the file is opening correctly 
-- FILEREAD:Checks codes are being read properly. Checks that there are not fewer than 1000 codes. 


FLAG INITIALIZING
-----------------
Checks that current flags are properly resetting to defaults with each new line. 


SET FLAG TESTS
--------------
These tests check that the system of reading hex codes, assigning them readable typedefs, and sending
them into their relevant case statements. Successful testing should check the code has been read, and ultimately stored in the propper cell struct, ready to be interpretted by SDL. 

FRONT COLOR
-----------
-Yellow, red, blue, green, magenta, cyan, black, white. 
-Tests front color codes, once read, properly activate the fgcolor flag and sets graphics mode to alphanumeric. 

TESTING FLAG CODES
------------------
Tests that the codes stored in "current" flags are properly passed to independant cell flags.
This is the feature that allows us to store global states, and manage more than one code at once in a system where only one state can be changed at once. 

TESTING CONTROL CODES
---------------------
Same as above. Tests codes are properly read and stored, passed into appropriate flags. 
-Double Height, Single Height, Hold Graphics, Release Graphics, Continuous Graphics, Separate Graphics. 

TESTING GRAPHICS COLORS
-----------------------
Functions in testing.c check that codes are properly stored in structs. All graphics color settings are tested visually in test.m7 and other test files. Compared to .gifs to make sure tone is close to original. 
All colors standard versions of (255, 255, 255) with all values set as either 0 or 255 (no mixing).

INCOMPATIBLE CODES
------------------
Testing that the system rejects, or converts, code that is not within the range presented on the teletext worksheet. If you receive the code 0x11 for example, it should be thrown out, and there is a test function that tests several variations of in and out of range code. 


SIXELS
------
Sixels cans be tested with the hex file: "testfiles/sixelchart.m7"

SIXELS (IN DETAIL)
------------------
Inside the program the loading of graphics modes (seperate and contiguous) is tested several ways in testing.c. The SetFlag function is tested, as is its holding abilities. Each color is tested, changed, and then restested. 

The testfile SIXELCHART.m7 has been provided in /testfiles and has a recreation of the teletext assignment 
pdf. This allows for a quick visual reference to make sure all patterns have been set correctly. 






-----------------------------------------------------
                    - BUGS-
-----------------------------------------------------

TELETEXT
--------








VALGRIND + MEMORY LEAKS
-----------------------
When rendering an SDL window Valgrind produces:

LEAK SUMMARY:
definitely lost: 120 bytes in 1 blocks
indirectly lost: 1,368 bytes in 6 blocks
possibly lost: 382,931 bytes in 2,168 blocks
still reachable: 6,048,361 bytes in 3,328 blocks
suppressed: 0 bytes in 0 blocks

I've tried to track down the source of these leaks, and have determined the majority of them are in SDL, and outside the scope of my code. I believe this because A) this program produces no leaks in its extension mode, when printing codes to terminal, or in any other situation where SDL is NOT rendered. B) even the simplest program to initialize and close a blank SDL window will create similar leaks. 


EXTENSION
---------

-Double Height is done fundamentally different than in SDL. Since it is difficult to split text, instead I am rendering the bottom at double height, and not printing the top at all. I have managed to mimick the split background using a gradient that refers to the cell above the cell being drawn -- however this doesn't apply to drawing font. As a result FONT IS NOT SPLIT. 
	-Additionally, the top line that is ignored may have glitches. Ie single chars not showing up. 
	-Splits between double and single height, as seen in the ABC/EF* section of test.m7, do not 		render.  
	-Chars will overflow fixed cell size, causing slight overlap. 

-SIXELS were done in the same was as teletext. I use the HTML/CSS <SVG> and <RECT> tags. This works relatively well, however there is a black blank space under each sixel since HTML reserves this space for text "hangdown" ie the tail of y, g. This might also cause problems on older versions of html, however everywhere I've managed to test has been OK. 

-SPACING between cells is dynamic, and uneven without CSS. For best output this MUST be assembled with the attached CSS file. 

-NON-Ascii characters not all working correctly. 

-By the nature of HTML, some lines in my extension.c are very, very long. I havent seen a way to avoid this, but it falls outside the house style guidelines. 

EXTENSION - FIXED
-----------------
Black lines between cells - Fixed with CSS border settings. 
Font overrunning cells - fixed with fontsize and overflow settings in html. 
Background color running over - fixed by changing if statement in call of SetFlag function. 
Extra color block above double height - fixed by removing a0 from list of printed chars when fontsize = double. 
Huge gaps between sixels - fixed with CSS <td><tf> and <table> settings. 






















